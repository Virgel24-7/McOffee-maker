
DATA SEGMENT 'DATA'
	;CONSTANTS
	MAX EQU 08H				;MAXIMUM NUMBER PER INGREDIENT
	DEFAULT EQU 02H			;DEFAULT AMOUNT PER INGREDIENT

	;DELAY VALUES
	HEAT_D EQU 0AH
	DISPENSE_D EQU 0AH
	ENJOY_D EQU 04H
	NOT_D EQU 04H
	ADD_D EQU 04H
	BLINK_D EQU 04FFFH		;NOT IN SECONDS, JUST CX DECREMENT

	PORTA EQU 0F0H			;PORTA ADDRESS
	PORTB EQU 0F2H			;PORTB ADDRESS
	PORTC EQU 0F4H			;PORTC ADDRESS
	COM_REG EQU 0F6H	    ;COMMAND REGISTER ADDRESS

	PORTA2 EQU 0F8H		    ;PORTA ADDRESS FOR 2ND 8255
	PORTB2 EQU 0FAH			;PORTB ADDRESS FOR 2ND 8255
	PORTC2 EQU 0FCH			;PORTC ADDRESS FOR 2ND 8255
	COM_REG2 EQU 0FEH		;COMMAND REGISTER ADDRESS FOR 2ND 8255

	PORT_DELAY EQU 0C8H	    ;DELAY COUNT FOR 8253
	COM8253 EQU 0CEH		;COMMAND REGISTER ADDRESS FOR 8253

	;8259
	PIC1 EQU 0C0H
	PIC2 EQU 0C2H
	ICW1 EQU 13H
	ICW2 EQU 80H
	ICW4 EQU 03H
	OCW1 EQU 000H
DATA ENDS

CODE SEGMENT 'CODE'
	ASSUME DS:DATA, CS: CODE, SS:STK
	
	ORG 09000H				;WRITE CODE BELOW STARTING AT ADDRESS 09000H
JMP START
	;strings
	CHOICE1 DB "Black$"
	CHOICE2 DB "Black with sugar$"
	CHOICE3 DB "W/ creamer only$"
	CHOICE4 DB "W/ creamer & sugar$"

	ING1 DB "Coffee mix(1 tbsp)$"
	ING2 DB "Sugar(1 tbsp)$"
	ING3 DB "Creamer(1 tbsp)$"
	ING4 DB "Hot water(200 ml)$"

	CONFIRM1 DB "ARE YOU SURE? PRESS:$"
	CONFIRM2 DB " SAME BUTTON    -YES$"
	CONFIRM3 DB " ANOTHER BUTTON - NO$"

	DISPENSING DB "Dispensing...$"
	HEATING DB "Heating Water...$"
	ENJOY DB "Enjoy Your Coffee!$"
	NOT1 DB "Not enough$"
	NOT2 DB "Ingredients$"
	ADDTXT DB "Adding Ingredient...$"

START:
	MOV AX, DATA
	MOV DS, AX
	MOV AX, STK
	MOV SS, AX
	LEA SP, TOS
	CLI

	;SET COMMAND REGISTERS
	MOV DX, COM_REG
	MOV AL, 80H
	OUT DX, AL

	MOV DX, COM_REG2
	MOV AL, 89H
	OUT DX, AL

	MOV DX, COM8253
	MOV AL, 38H
	OUT DX, AL

	;SET 8259
	MOV DX, PIC1
	MOV AL, ICW1
	OUT DX, AL
	MOV DX, PIC2
	MOV AL, ICW2
	OUT DX, AL
	MOV AL, ICW4
	OUT DX, AL
	MOV AL, OCW1
	OUT DX, AL

	;SET IVT
	MOV AX, OFFSET ISR1
	MOV [ES:200H], AX
	MOV AX, SEG ISR1
	MOV [ES:202H], AX

	MOV AX, OFFSET ISR2
	MOV [ES:204H], AX
	MOV AX, SEG ISR2
	MOV [ES:206H], AX

	MOV AX, OFFSET ISR3
	MOV [ES:208H], AX
	MOV AX, SEG ISR3
	MOV [ES:20AH], AX

	MOV AX, OFFSET ISR4
	MOV [ES:20CH], AX
	MOV AX, SEG ISR4
	MOV [ES:20EH], AX

	MOV AX, OFFSET ISR5
	MOV [ES:210H], AX
	MOV AX, SEG ISR5
	MOV [ES:212H], AX

	MOV AX, OFFSET ISR6
	MOV [ES:214H], AX
	MOV AX, SEG ISR6
	MOV [ES:216H], AX

	MOV AX, OFFSET ISR7
	MOV [ES:218H], AX
	MOV AX, SEG ISR7
	MOV [ES:21AH], AX

	MOV AX, OFFSET ISR8
	MOV [ES:21CH], AX
	MOV AX, SEG ISR8
	MOV [ES:21EH], AX

	CALL FAR PTR INITIAL_INV
	CALL FAR PTR INITIAL_DISPLAY
	;RESET LEDs
	MOV DX, PORTA2
	MOV AL, 0H
	OUT DX, AL
	STI
     
	HERE:  
		CALL BLINK_LED
		JMP HERE
     
BLINK_LED:
	MOV DX, PORTB2
	MOV AL, 00H
	OUT DX, AL

	CALL DELAY
	MOV AL, 0FH
	OUT DX, AL
	CALL DELAY

	RET

DELAY:
	MOV CX, BLINK_D
L1:
	NOP
	DEC CX
	JNE L1
	RET
	
CODE ENDS

STK SEGMENT STACK 'STACK'
	ORG 01000H
	BOS DW 128d DUP(?)
	TOS LABEL WORD
STK ENDS

;SEGMENTS FOR ISRs
PROCED1 SEGMENT 'CODE'
ISR1 PROC FAR
ASSUME CS:PROCED1, DS:DATA
ORG 03000H
	PUSHF
	PUSH AX
	PUSH DX
	CALL FAR PTR MASKI
	MOV BX, 0H
	MOV DI, OFFSET ING1
	CALL FAR PTR ADD_INVDI
	CALL FAR PTR UNMASKI
	POP DX
	POP AX
	POPF
	IRET
ISR1 ENDP
PROCED1 ENDS

PROCED2 SEGMENT 'CODE'
ISR2 PROC FAR
ASSUME CS:PROCED2, DS:DATA
ORG 04000H
	PUSHF
	PUSH AX
	PUSH DX
	CALL FAR PTR MASKI
	MOV BX, 1H
	MOV DI, OFFSET ING2
	CALL FAR PTR ADD_INVDI
	CALL FAR PTR UNMASKI
	POP DX
	POP AX
	POPF
	IRET
ISR2 ENDP
PROCED2 ENDS

PROCED3 SEGMENT 'CODE'
ISR3 PROC FAR
ASSUME CS:PROCED3, DS:DATA
ORG 05000H
	PUSHF
	PUSH AX
	PUSH DX
	CALL FAR PTR MASKI
	MOV BX, 2H
	MOV DI, OFFSET ING3
	CALL FAR PTR ADD_INVDI
	CALL FAR PTR UNMASKI
	POP DX
	POP AX
	POPF
	IRET
ISR3 ENDP
PROCED3 ENDS

PROCED4 SEGMENT 'CODE'
ISR4 PROC FAR
ASSUME CS:PROCED4, DS:DATA
ORG 06000H
	PUSHF
	PUSH AX
	PUSH DX
	CALL FAR PTR MASKI
	MOV BX, 3H
	MOV DI, OFFSET ING4
	CALL FAR PTR ADD_INVDI
	CALL FAR PTR UNMASKI
	POP DX
	POP AX
	POPF
	IRET
ISR4 ENDP
PROCED4 ENDS

PROCED5 SEGMENT 'CODE'	 		;BLACK COFFEE
ISR5 PROC FAR
ASSUME CS:PROCED5, DS:DATA
ORG 07000H
	PUSHF
	PUSH AX
	PUSH DX
	MOV DI, OFFSET CHOICE1
	MOV BL, 01H
	CALL FAR PTR CONFIRMBH
	CMP BH, 0H					;IF 0, THEN SKIP DISPENSE
	JE ENDI5

	CALL FAR PTR MASKI
	MOV BL, 0001B
	CALL FAR PTR DISPENSE
	CALL FAR PTR UNMASKI
	
	ENDI5:
	POP DX
	POP AX
	POPF
	IRET
ISR5 ENDP
PROCED5 ENDS

PROCED6 SEGMENT 'CODE'	 		;BLACK COFFEE WITH SUGAR
ISR6 PROC FAR
ASSUME CS:PROCED6, DS:DATA
ORG 08000H
	PUSHF
	PUSH AX
	PUSH DX
	MOV DI, OFFSET CHOICE2
	MOV BL, 02H
	CALL FAR PTR CONFIRMBH
	CMP BH, 0H					;IF 0, THEN SKIP DISPENSE
	JE ENDI6

	CALL FAR PTR MASKI
	MOV BL, 0010B
	CALL FAR PTR DISPENSE
	CALL FAR PTR UNMASKI
	
	ENDI6:
	POP DX
	POP AX
	POPF
	IRET
ISR6 ENDP
PROCED6 ENDS

PROCED7 SEGMENT 'CODE'			;COFFEE WITH CREAMER AND SUGAR
ISR7 PROC FAR
ASSUME CS:PROCED7, DS:DATA
ORG 0A000H
	PUSHF
	PUSH AX
	PUSH DX
	MOV DI, OFFSET CHOICE3
	MOV BL, 03H
	CALL FAR PTR CONFIRMBH
	CMP BH, 0H					;IF 0, THEN SKIP DISPENSE
	JE ENDI7

	CALL FAR PTR MASKI
	MOV BL, 0100B
	CALL FAR PTR DISPENSE
	CALL FAR PTR UNMASKI
	
	ENDI7:
	POP DX
	POP AX
	POPF
	IRET
ISR7 ENDP
PROCED7 ENDS

PROCED8 SEGMENT 'CODE' 			;COFFEE WITH CREAMER
ISR8 PROC FAR
ASSUME CS:PROCED8, DS:DATA
ORG 0C000H
	PUSHF
	PUSH AX
	PUSH DX
	MOV DI, OFFSET CHOICE4
	MOV BL, 04H
	CALL FAR PTR CONFIRMBH
	CMP BH, 0H					;IF 0, THEN SKIP DISPENSE
	JE ENDI8

	CALL FAR PTR MASKI
	MOV BL, 1000B
	CALL FAR PTR DISPENSE
	CALL FAR PTR UNMASKI

	ENDI8:
	POP DX
	POP AX
	POPF

	IRET
ISR8 ENDP
PROCED8 ENDS

SHAREDS SEGMENT 'CODE'
ASSUME CS:SHAREDS, DS:DATA

HOT_FLAG DB 0H
INVENTORY DB 0H,0H,0H,0H		;COFFEE, SUGAR, CREAMER, HOT WATER
CONFIRMNUM DB 0H

DELAY_MS:						;USED FOR LCDs
	PUSH CX
	MOV CX, 0FFH
L11:
	DEC CX
	NOP
	JNZ L11
	POP CX
	RET

;---Interrupt masking and unmasking procedures---	
MASKI PROC FAR
	MOV AL, 0FFH
	MOV DX, PIC2
	OUT DX, AL					;AUTOMATIC TO OCW1 IN PIC
	RETF
MASKI ENDP

UNMASKI PROC FAR
	MOV AL, OCW1
	MOV DX, PIC2
	OUT DX, AL
	RETF
UNMASKI ENDP

;---Confirmation procedure---
CONFIRMBH PROC FAR
	CALL MASKI					;DON'T LISTEN TO INTERRUPTS WHILE CONFIRMING

	CMP CONFIRMNUM, 0H
	JE SHOW_CONFIRM

	CMP CONFIRMNUM, BL
	JE SKIP_CONFIRM
	JMP SKIP_CD

	SHOW_CONFIRM:
		;DISPLAY TEXTS: CHOICE, ARE YOU SURE, INSTRUCTION
		CALL INIT_LCD1
		CALL INIT_LCD2
		MOV AL, 080H
		CALL INST_CTRL1
		MOV SI, DI
		CALL PRINTSI1
		MOV AL, 0C0H
		CALL INST_CTRL1
		MOV SI, OFFSET CONFIRM1
		CALL PRINTSI1
		MOV AL, 094H
		CALL INST_CTRL1
		MOV SI, OFFSET CONFIRM2
		CALL PRINTSI1
		MOV AL, 0D4H
		CALL INST_CTRL1
		MOV SI, OFFSET CONFIRM3
		CALL PRINTSI1
		MOV BH, 0H					;SKIP DISPENSE
		MOV CONFIRMNUM, BL
		JMP DONE_CONFIRM

	SKIP_CONFIRM:
		MOV BH, 1H					;LET DISPENSE RUN
		JMP DONE_CONFIRM

	SKIP_CD:
		MOV BH, 0H					;SKIP DISPENSE
		CALL INITIAL_DISPLAY
		MOV CONFIRMNUM, 0H

	DONE_CONFIRM:
	;MASK ONLY INGREDIENT BUTTONS
	MOV AL, 00FH
	MOV DX, PIC2
	OUT DX, AL
	RETF
CONFIRMBH ENDP

;---inventory procedures---
INITIAL_INV PROC FAR
	MOV AL, DEFAULT
	MOV INVENTORY[0], AL
	MOV INVENTORY[1], AL
	MOV INVENTORY[2], AL
	MOV INVENTORY[3], AL
	RETF
INITIAL_INV ENDP

ADD_INVDI PROC FAR
	MOV AL, 0H
	MOV DX, PORTB2
	OUT DX, AL
	MOV AL, MAX
	MOV INVENTORY[BX], AL
	;DISPLAY ADDING INGREDIENT
	CALL INIT_LCD2
	MOV AL, 0C0H
	CALL INST_CTRL2
	MOV SI, OFFSET ADDTXT
	CALL PRINTSI2
	MOV AL, 095H
	CALL INST_CTRL2
	MOV SI, DI
	CALL PRINTSI2
	MOV BH, ADD_D
	CALL DELAY_BHSEC
	CALL INITIAL_DISPLAY
	RETF
ADD_INVDI ENDP

;---Display Procedures---
DISPLAY_MENU1:
	MOV AL, 80H
	CALL INST_CTRL1
	MOV AL, "1"
	CALL DATA_CTRL1
	MOV AL, "."
	CALL DATA_CTRL1
	MOV SI, OFFSET CHOICE1
	CALL PRINTSI1

	MOV AL, 0C0H
	CALL INST_CTRL1
	MOV AL, "2"
	CALL DATA_CTRL1
	MOV AL, "."
	CALL DATA_CTRL1
	MOV SI, OFFSET CHOICE2
	CALL PRINTSI1

	MOV AL, 94H
	CALL INST_CTRL1
	MOV AL, "3"
	CALL DATA_CTRL1
	MOV AL, "."
	CALL DATA_CTRL1
	MOV SI, OFFSET CHOICE3
	CALL PRINTSI1

	MOV AL, 0D4H
	CALL INST_CTRL1
	MOV AL, "4"
	CALL DATA_CTRL1
	MOV AL, "."
	CALL DATA_CTRL1
	MOV SI, OFFSET CHOICE4
	CALL PRINTSI1
	RET

DISPLAY_MENU2:
	MOV AL, 93H
	CALL INST_CTRL2
	MOV BX, 0H
	MOV AL, INVENTORY[BX]
	ADD AL, 30H
	CALL DATA_CTRL2
	MOV AL, 80H
	CALL INST_CTRL2
	MOV SI, OFFSET ING1
	CALL PRINTSI2

	MOV AL, 0D3H
	CALL INST_CTRL2
	MOV BX, 1H
	MOV AL, INVENTORY[BX]
	ADD AL, 30H
	CALL DATA_CTRL2
	MOV AL, 0C0H
	CALL INST_CTRL2
	MOV SI, OFFSET ING2
	CALL PRINTSI2

	MOV AL, 0A7H
	CALL INST_CTRL2
	MOV BX, 2H
	MOV AL, INVENTORY[BX]
	ADD AL, 30H
	CALL DATA_CTRL2
	MOV AL, 094H
	CALL INST_CTRL2
	MOV SI, OFFSET ING3
	CALL PRINTSI2

	MOV AL, 0E7H
	CALL INST_CTRL2
	MOV BX, 3H
	MOV AL, INVENTORY[BX]
	ADD AL, 30H
	CALL DATA_CTRL2
	MOV AL, 0D4H
	CALL INST_CTRL2
	MOV SI, OFFSET ING4
	CALL PRINTSI2
	RET

;---LCD Procedures---
INITIAL_DISPLAY PROC FAR
	;INITIALIZE LCDS
	CALL INIT_LCD1
	CALL INIT_LCD2
	CALL DISPLAY_MENU1
	CALL DISPLAY_MENU2
	RETF
INITIAL_DISPLAY ENDP

INIT_LCD1:
	MOV AL, 38H
	CALL INST_CTRL1
	MOV AL, 08H
	CALL INST_CTRL1
	MOV AL, 01H
	CALL INST_CTRL1
	MOV AL, 06H
	CALL INST_CTRL1
	MOV AL, 0CH
	CALL INST_CTRL1
	RET

INIT_LCD2:
	MOV AL, 38H
	CALL INST_CTRL2
	MOV AL, 08H
	CALL INST_CTRL2
	MOV AL, 01H
	CALL INST_CTRL2
	MOV AL, 06H
	CALL INST_CTRL2
	MOV AL, 0CH
	CALL INST_CTRL2
	RET

PRINTSI1:
	MOV AX, [SI]
	CMP AL, '$'
	JE DONEPRINT1

	CALL DATA_CTRL1
	INC SI
	JMP PRINTSI1

	DONEPRINT1:
	RET
    
INST_CTRL1:
	PUSH AX
	MOV DX, PORTA
	OUT DX, AL
	MOV DX, PORTC
	MOV AL, 02H
	OUT DX, AL
	CALL DELAY_MS
	MOV DX, PORTC
	MOV AL, 00H
	OUT DX, AL
	POP AX
	RET
     
DATA_CTRL1:
	PUSH AX
	MOV DX, PORTA
	OUT DX, AL
	MOV DX, PORTC
	MOV AL, 03H
	OUT DX, AL
	CALL DELAY_MS
	MOV DX, PORTC
	MOV AL, 01H
	OUT DX, AL
	POP AX
	RET

PRINTSI2:
	MOV AX, [SI]
	CMP AL, '$'
	JE DONEPRINT2

	CALL DATA_CTRL2
	INC SI
	JMP PRINTSI2

	DONEPRINT2:
	RET
    
INST_CTRL2:
	PUSH AX
	MOV DX, PORTB
	OUT DX, AL
	MOV DX, PORTC
	MOV AL, 20H
	OUT DX, AL
	CALL DELAY_MS
	MOV DX, PORTC
	MOV AL, 00H
	OUT DX, AL
	POP AX
	RET
     
DATA_CTRL2:
	PUSH AX
	MOV DX, PORTB
	OUT DX, AL
	MOV DX, PORTC
	MOV AL, 30H
	OUT DX, AL
	CALL DELAY_MS
	MOV DX, PORTC
	MOV AL, 10H
	OUT DX, AL
	POP AX
	RET

;---Dispensing Procedures---
DISPENSE PROC FAR
	MOV AL, BL
	MOV DX, PORTB2
	OUT DX, AL
	
	;CLEAR 2 LCDs
	CALL INIT_LCD1
	CALL INIT_LCD2

	;CHECK IF HOT WATER AND COFFEE AVAILABLE
	CMP INVENTORY[0], 0H
	JE NOT_ENOUGH
	CMP INVENTORY[3], 0H
	JE NOT_ENOUGH

	;DECODE INPUT
	MOV AL, BL
	AND AL, 0FH
	CMP AL, 0001B
	JE BLACK

	CMP AL, 0010B
	JE BLACKWSUGAR

	CMP AL, 0100B
	JE WCREAMER		

	CMP AL, 1000B
	JE WCS			
	JMP DONE_DECODE

	BLACK:
	MOV CL, 11001B
	MOV DI, OFFSET CHOICE1
	JMP DONE_DECODE

	BLACKWSUGAR:
	CMP INVENTORY[1], 0H
	JE NOT_ENOUGH
	DEC INVENTORY[1]
	MOV CL, 11101B
	MOV DI, OFFSET CHOICE2
	JMP DONE_DECODE

	WCREAMER:	
	CMP INVENTORY[2], 0H
	JE NOT_ENOUGH
	DEC INVENTORY[2]
	MOV CL, 11011B
	MOV DI, OFFSET CHOICE3
	JMP DONE_DECODE

	WCS:
	CMP INVENTORY[1], 0H
	JE NOT_ENOUGH
	CMP INVENTORY[2], 0H
	JE NOT_ENOUGH
	DEC INVENTORY[1]
	DEC INVENTORY[2]
	MOV CL, 11111B
	MOV DI, OFFSET CHOICE4
	JMP DONE_DECODE

NOT_ENOUGH:
	;DISPLAY NOT1
	CALL INIT_LCD1
	MOV AL, 0C4H
	CALL INST_CTRL1
	MOV SI, OFFSET NOT1
	CALL PRINTSI1
	;DISPLAY NOT2
	MOV AL, 098H
	CALL INST_CTRL1
	MOV SI, OFFSET NOT2
	CALL PRINTSI1
	MOV BH, NOT_D
	CALL DELAY_BHSEC

	JMP DONE_PROCESS

DONE_DECODE:	
	MOV AL, HOT_FLAG
	CMP AL, 0H
	JNE OPEN_VALVES
	;display heating
	MOV AL, 0C2H
	CALL INST_CTRL1
	MOV SI, OFFSET HEATING
	CALL PRINTSI1

	;DELAY HEATING
	MOV BH, HEAT_D
	CALL DELAY_BHSEC
	MOV HOT_FLAG, 01H

OPEN_VALVES:
	;DECREMENT HOT WATER AND COFFEE
	DEC INVENTORY[0]
	DEC INVENTORY[3]

	;DISPLAY DISPENSING
	CALL INIT_LCD1
	MOV AL, 0C0H
	CALL INST_CTRL1
	MOV SI, OFFSET DISPENSING
	CALL PRINTSI1

	MOV DX, PORTA2
	MOV AL, CL
	OUT DX, AL

	;DISPLAY THE CHOICE
	MOV AL, 096H
	CALL INST_CTRL1
	MOV SI ,DI
	CALL PRINTSI1

	;DISPENSE WITH DELAY
	MOV BH, DISPENSE_D
	CALL DELAY_BHSEC

	CMP INVENTORY[3], 0H
	JNE CLOSE_VALVES
	MOV HOT_FLAG, 0H

CLOSE_VALVES:
	MOV DX, PORTA2
	MOV AL, HOT_FLAG
	MOV CL, 4H
	SHL AL, CL
	OUT DX, AL

	;DISPLAY ENJOY
	CALL INIT_LCD1
	MOV AL, 0C1H
	CALL INST_CTRL1
	MOV SI, OFFSET ENJOY
	CALL PRINTSI1
	MOV BH, ENJOY_D
	CALL DELAY_BHSEC

DONE_PROCESS:
	CALL INITIAL_DISPLAY
	MOV CONFIRMNUM, 0H
	RETF

DISPENSE ENDP
     
DELAY_BHSEC:
	LOOP_COUNT:
	MOV DX, PORT_DELAY    
	MOV AX, 0F9FH		;1 SECOND DELAY WITH 8253  USING 4KHZ CLOCK       
	OUT DX, AL                          
	MOV AL, AH            
	OUT DX, AL     

	CONTINUE:
	MOV DX, PORTC2
	IN AL, DX
	AND AL, 10H

	CMP AL, 0H
	JNE CONTINUE

	DEC BH

	CMP BH, 0H
	JNE LOOP_COUNT

	RET

SHAREDS ENDS
END